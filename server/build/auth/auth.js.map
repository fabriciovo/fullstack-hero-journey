{"version":3,"sources":["../../src/auth/auth.js"],"names":["passport","use","localStrategy","Strategy","usernameField","passwordField","passReqToCallback","request","email","password","done","username","body","player","playerName","attack","defense","maxHealth","health","frame","gold","items","UserModel","create","user","findOne","Error","isValidPassword","valid","jwtStrategy","secretOrKey","process","env","JWT_SECRET","jwtFromRequest","token","cookies","jwt"],"mappings":"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","sourcesContent":["import passport from \"passport\";\r\nimport localStrategy from \"passport-local\";\r\nimport jwtStrategy from \"passport-jwt\";\r\n\r\nimport UserModel from \"../models/UserModel\";\r\n\r\n// handle user registration\r\npassport.use(\r\n  \"signup\",\r\n  new localStrategy.Strategy(\r\n    {\r\n      usernameField: \"email\",\r\n      passwordField: \"password\",\r\n      passReqToCallback: true,\r\n    },\r\n    async (request, email, password, done) => {\r\n      try {\r\n        const { username } = request.body;\r\n        const player = {\r\n          playerName: username,\r\n          attack: 25,\r\n          defense: 10,\r\n          maxHealth: 150,\r\n          health: 150,\r\n          frame: 0,\r\n          gold: 0,\r\n          items: null,\r\n        };\r\n        const user = await UserModel.create({\r\n          email,\r\n          password,\r\n          username,\r\n          player,\r\n        });\r\n        return done(null, user);\r\n      } catch (error) {\r\n        return done(error);\r\n      }\r\n    }\r\n  )\r\n);\r\n\r\n// handle user login\r\npassport.use(\r\n  \"login\",\r\n  new localStrategy.Strategy(\r\n    {\r\n      usernameField: \"username\",\r\n      passwordField: \"password\",\r\n    },\r\n    async (username, password, done) => {\r\n      try {\r\n        const user = await UserModel.findOne({ username });\r\n        if (!user) {\r\n          return done(new Error(\"user not found\"), false);\r\n        }\r\n\r\n        if (!user.player) {\r\n          return done(new Error(\"user not found\"), false);\r\n        }\r\n        const valid = await user.isValidPassword(password);\r\n        if (!valid) {\r\n          return done(new Error(\"invalid password\"), false);\r\n        }\r\n        return done(null, user);\r\n      } catch (error) {\r\n        return done(error);\r\n      }\r\n    }\r\n  )\r\n);\r\n\r\n// verify jwt token\r\npassport.use(\r\n  new jwtStrategy.Strategy(\r\n    {\r\n      secretOrKey: process.env.JWT_SECRET,\r\n      jwtFromRequest: (request) => {\r\n        let token = null;\r\n        if (request && request.cookies) token = request.cookies.jwt;\r\n        return token;\r\n      },\r\n    },\r\n    async (token, done) => {\r\n      try {\r\n        return done(null, token.user);\r\n      } catch (error) {\r\n        return done(error);\r\n      }\r\n    }\r\n  )\r\n);\r\n"],"file":"auth.js"}