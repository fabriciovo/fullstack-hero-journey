{"version":3,"sources":["../../../src/game_manager/controllers/MonsterController.js"],"names":["MonsterController","io","monsters","monsterLocations","setupSpawn","init","update","socket","playerList","on","monsterId","monster","exp","playerAttackValue","id","attack","loseHealth","health","updateExp","emit","deleteMonster","playerId","playerAttacked","updateGold","parseInt","gold","respawn","setInterval","Object","keys","forEach","_movement","length","spawnMonster","location","Math","floor","random","invalidLocation","some","obj","x","y","pickRandomLocation","randomEnemy","enemyData","enemies","MonsterModel","goldValue","key","healthValue","attackValue","expValue","addMonster","push","move"],"mappings":"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","sourcesContent":["import MonsterModel from \"../../models/MonsterModel\";\r\nimport * as enemyData from \"../../../public/assets/Enemies/enemies.json\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport default class MonsterController {\r\n  constructor(io) {\r\n    this.monsters = {};\r\n    this.monsterLocations = [];\r\n    this.io = io;\r\n\r\n    this.setupSpawn();\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.update();\r\n  }\r\n\r\n  setupEventListeners(socket, playerList) {\r\n    socket.on(\"monsterAttacked\", (monsterId) => {\r\n      // update the spawner\r\n      if (this.monsters[monsterId]) {\r\n        const monster = this.monsters[monsterId];\r\n        const { exp } = monster;\r\n        const playerAttackValue = playerList[socket.id].attack;\r\n        // subtract health monster model\r\n        monster.loseHealth(playerAttackValue);\r\n\r\n        // check the monsters health, and if dead remove that object\r\n        if (monster.health <= 0) {\r\n          //update xp\r\n          playerList[socket.id].updateExp(exp);\r\n          this.io.emit(\"updateXp\", exp, socket.id);\r\n\r\n          this.deleteMonster(monster.id);\r\n        } else {\r\n          // update the monsters health\r\n          this.io.emit(\"updateMonsterHealth\", monsterId, monster.health);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"monsterAttack\", (monsterId, playerId) => {\r\n      if (!this.monsters[monsterId]) return;\r\n      const { attack } = this.monsters[monsterId];\r\n      // update the players health\r\n      playerList[playerId].playerAttacked(attack);\r\n      this.io.emit(\"updatePlayerHealth\", playerId, playerList[playerId].health);\r\n\r\n      // check the player's health, if below 0 have the player respawn\r\n      if (playerList[playerId].health <= 0) {\r\n        // update the gold the player has\r\n        playerList[playerId].updateGold(\r\n          parseInt(-playerList[playerId].gold / 2, 10)\r\n        );\r\n        playerList[playerId].updateExp(\r\n          parseInt(-playerList[playerId].exp / 2, 10)\r\n        );\r\n        socket.emit(\"updateScore\", playerList[playerId].gold);\r\n\r\n        // respawn the player\r\n        playerList[playerId].respawn(playerList);\r\n        this.io.emit(\"respawnPlayer\", playerList[playerId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  update() {\r\n    setInterval(() => {\r\n      Object.keys(this.monsters).forEach((id) => {\r\n        if (!this.monsters[id]) return;\r\n        this._movement(this.monsters[id]);\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  setupSpawn() {\r\n    setInterval(() => {\r\n      if (Object.keys(this.monsters).length <= 8) {\r\n        this.spawnMonster();\r\n      }\r\n    }, 8000);\r\n  }\r\n\r\n  pickRandomLocation() {\r\n    const location =\r\n      this.monsterLocations[\r\n        Math.floor(Math.random() * this.monsterLocations.length)\r\n      ];\r\n\r\n    if (this.monsters.length > 0) {\r\n      const invalidLocation = this.monsters.some((obj) => {\r\n        if (obj.x === location[0] && obj.y === location[1]) {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      if (invalidLocation) return this.pickRandomLocation();\r\n      return location || [200, 200];\r\n    }\r\n    return location || [200, 200];\r\n  }\r\n\r\n  spawnMonster() {\r\n    const randomEnemy =\r\n      enemyData.enemies[Math.floor(Math.random() * enemyData.enemies.length)];\r\n\r\n    const location = this.pickRandomLocation();\r\n    const monster = new MonsterModel(\r\n      location[0],\r\n      location[1],\r\n      randomEnemy.goldValue, // gold value\r\n      `monster-${v4()}`,\r\n      randomEnemy.key, // key\r\n      randomEnemy.healthValue, // health value\r\n      randomEnemy.attackValue, // attack value\r\n      randomEnemy.expValue, // exp value\r\n      3000 //timer\r\n    );\r\n    this.addMonster(monster.id, monster);\r\n  }\r\n\r\n  addMonster(monsterId, monster) {\r\n    this.monsters[monsterId] = monster;\r\n    this.io.emit(\"monsterSpawned\", monster);\r\n  }\r\n\r\n  deleteMonster(monsterId) {\r\n    delete this.monsters[monsterId];\r\n    this.io.emit(\"monsterRemoved\", monsterId);\r\n  }\r\n\r\n  addLocation(x, y) {\r\n    this.monsterLocations.push([x, y]);\r\n  }\r\n\r\n  getMonsterList() {\r\n    return this.monsters;\r\n  }\r\n\r\n  getMonster(monsterId) {\r\n    return this.monsters[monsterId];\r\n  }\r\n  getMonsterLocationList() {\r\n    return this.monsterLocations;\r\n  }\r\n\r\n  _movement(monster) {\r\n    monster.move();\r\n    this.io.emit(\"monsterMovement\", monster);\r\n  }\r\n}\r\n"],"file":"MonsterController.js"}