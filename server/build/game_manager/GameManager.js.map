{"version":3,"sources":["../../src/game_manager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","players","playerLocations","chestLocations","monsterLocations","parseMapData","setupEventListeners","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","id","emit","token","frame","decoded","jwt","verify","process","env","JWT_SECRET","user","console","log","spawnPlayer","broadcast","error","playerData","flipX","playerAttacking","currentDirection","chestId","gold","updateGold","spawnerId","removeObject","monsterId","attack","loseHealth","health","updateHealth","parseInt","respawn","attackedPlayerId","to","config","spawnInterval","limit","spawnerType","SpawnerType","CHEST","Object","keys","key","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","playerId","player","PlayerModel","chest","monster"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport PlayerModel from \"./PlayerModel\";\r\nimport * as levelData from \"../../public/assets/level/large_level.json\";\r\nimport Spawner from \"./Spawner\";\r\nimport { SpawnerType } from \"./utils\";\r\n\r\nexport default class GameManager {\r\n  constructor(io) {\r\n    this.io = io;\r\n    this.spawners = {};\r\n    this.chests = {};\r\n    this.monsters = {};\r\n    this.players = {};\r\n\r\n    this.playerLocations = [];\r\n    this.chestLocations = {};\r\n    this.monsterLocations = {};\r\n  }\r\n\r\n  setup() {\r\n    this.parseMapData();\r\n    this.setupEventListeners();\r\n    this.setupSpawners();\r\n  }\r\n\r\n  parseMapData() {\r\n    this.levelData = levelData;\r\n    this.levelData.layers.forEach((layer) => {\r\n      if (layer.name === \"player_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          this.playerLocations.push([obj.x, obj.y]);\r\n        });\r\n      } else if (layer.name === \"monster_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.monsterLocations[obj.properties.spawner]) {\r\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      } else if (layer.name === \"chest_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.chestLocations[obj.properties.spawner]) {\r\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.io.on(\"connection\", (socket) => {\r\n      // player disconnected\r\n      socket.on(\"disconnect\", () => {\r\n        // delete user data from server\r\n        delete this.players[socket.id];\r\n\r\n        // emit a message to all players to remove this player\r\n        this.io.emit(\"disconnected\", socket.id);\r\n      });\r\n\r\n      socket.on(\"newPlayer\", (token, frame) => {\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { name } = decoded.user;\r\n          // create a new Player\r\n          console.log(frame)\r\n          this.spawnPlayer(socket.id, name, frame);\r\n\r\n          // send the players object to the new player\r\n          socket.emit(\"currentPlayers\", this.players);\r\n\r\n          // send the monsters object to the new player\r\n          socket.emit(\"currentMonsters\", this.monsters);\r\n\r\n          // send the chests object to the new player\r\n          socket.emit(\"currentChests\", this.chests);\r\n\r\n          // inform the other players of the new player that joined\r\n          socket.broadcast.emit(\"spawnPlayer\", this.players[socket.id]);\r\n        } catch (error) {\r\n          console.log(error);\r\n          socket.emit(\"invalidToken\");\r\n        }\r\n      });\r\n\r\n      socket.on(\"playerMovement\", (playerData) => {\r\n        if (this.players[socket.id]) {\r\n          this.players[socket.id].x = playerData.x;\r\n          this.players[socket.id].y = playerData.y;\r\n          this.players[socket.id].flipX = playerData.flipX;\r\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\r\n          this.players[socket.id].currentDirection =\r\n            playerData.currentDirection;\r\n\r\n          // emit a message to all players about the player that moved\r\n          this.io.emit(\"playerMoved\", this.players[socket.id]);\r\n        }\r\n      });\r\n\r\n      socket.on(\"pickUpChest\", (chestId) => {\r\n        // update the spawner\r\n        if (this.chests[chestId]) {\r\n          const { gold } = this.chests[chestId];\r\n\r\n          // updating the players gold\r\n          this.players[socket.id].updateGold(gold);\r\n          socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n          // removing the chest\r\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\r\n        }\r\n      });\r\n\r\n      socket.on(\"monsterAttacked\", (monsterId) => {\r\n        // update the spawner\r\n        if (this.monsters[monsterId]) {\r\n          const { gold, attack } = this.monsters[monsterId];\r\n\r\n          // subtract health monster model\r\n          this.monsters[monsterId].loseHealth();\r\n\r\n          // check the monsters health, and if dead remove that object\r\n          if (this.monsters[monsterId].health <= 0) {\r\n            // updating the players gold\r\n            this.players[socket.id].updateGold(gold);\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // removing the monster\r\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(\r\n              monsterId\r\n            );\r\n            this.io.emit(\"monsterRemoved\", monsterId);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(2);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            // update the players health\r\n            this.players[socket.id].updateHealth(-attack);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n\r\n            // update the monsters health\r\n            this.io.emit(\r\n              \"updateMonsterHealth\",\r\n              monsterId,\r\n              this.monsters[monsterId].health\r\n            );\r\n\r\n            // check the player's health, if below 0 have the player respawn\r\n            if (this.players[socket.id].health <= 0) {\r\n              // update the gold the player has\r\n              this.players[socket.id].updateGold(\r\n                parseInt(-this.players[socket.id].gold / 2, 10)\r\n              );\r\n              socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n              // respawn the player\r\n              this.players[socket.id].respawn(this.players);\r\n              this.io.emit(\"respawnPlayer\", this.players[socket.id]);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      socket.on(\"attackedPlayer\", (attackedPlayerId) => {\r\n        if (this.players[attackedPlayerId]) {\r\n          // get required info from attacked player\r\n          const { gold } = this.players[attackedPlayerId];\r\n\r\n          // subtract health from attacked player\r\n          this.players[attackedPlayerId].updateHealth(-1);\r\n\r\n          // check attacked players health, if dead send gold to other player\r\n          if (this.players[attackedPlayerId].health <= 0) {\r\n            // get the amount of gold, and update player object\r\n            this.players[socket.id].updateGold(gold);\r\n\r\n            // respawn attacked player\r\n            this.players[attackedPlayerId].respawn(this.players);\r\n            this.io.emit(\"respawnPlayer\", this.players[attackedPlayerId]);\r\n\r\n            // send update gold message to player\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // reset the attacked players gold\r\n            this.players[attackedPlayerId].updateGold(-gold);\r\n            this.io\r\n              .to(`${attackedPlayerId}`)\r\n              .emit(\"updateScore\", this.players[attackedPlayerId].gold);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(2);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              attackedPlayerId,\r\n              this.players[attackedPlayerId].health\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // player connected to our game\r\n      console.log(\"player connected to our game\");\r\n      console.log(socket.id);\r\n    });\r\n  }\r\n\r\n  setupSpawners() {\r\n    const config = {\r\n      spawnInterval: 3000,\r\n      limit: 3,\r\n      spawnerType: SpawnerType.CHEST,\r\n      id: \"\",\r\n    };\r\n    let spawner;\r\n\r\n    // create chest spawners\r\n    Object.keys(this.chestLocations).forEach((key) => {\r\n      config.id = `chest-${key}`;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.chestLocations[key],\r\n        this.addChest.bind(this),\r\n        this.deleteChest.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n\r\n    // create monster spawners\r\n    Object.keys(this.monsterLocations).forEach((key) => {\r\n      config.id = `monster-${key}`;\r\n      config.spawnerType = SpawnerType.MONSTER;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.monsterLocations[key],\r\n        this.addMonster.bind(this),\r\n        this.deleteMonster.bind(this),\r\n        this.moveMonsters.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n  }\r\n\r\n  spawnPlayer(playerId, name, frame) {\r\n    const player = new PlayerModel(\r\n      playerId,\r\n      this.playerLocations,\r\n      this.players,\r\n      name,\r\n      frame\r\n    );\r\n    this.players[playerId] = player;\r\n  }\r\n\r\n  addChest(chestId, chest) {\r\n    this.chests[chestId] = chest;\r\n    this.io.emit(\"chestSpawned\", chest);\r\n  }\r\n\r\n  deleteChest(chestId) {\r\n    delete this.chests[chestId];\r\n    this.io.emit(\"chestRemoved\", chestId);\r\n  }\r\n\r\n  addMonster(monsterId, monster) {\r\n    this.monsters[monsterId] = monster;\r\n    this.io.emit(\"monsterSpawned\", monster);\r\n  }\r\n\r\n  deleteMonster(monsterId) {\r\n    delete this.monsters[monsterId];\r\n    this.io.emit(\"monsterRemoved\", monsterId);\r\n  }\r\n\r\n  moveMonsters() {\r\n    this.io.emit(\"monsterMovement\", this.monsters);\r\n  }\r\n}\r\n"],"file":"GameManager.js"}