{"version":3,"sources":["../../src/game_manager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","players","items","playerLocations","chestLocations","monsterLocations","itemsLocations","itemData","locations","parseMapData","setupEventListeners","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","id","UserModel","updateOne","username","playerName","$set","player","console","log","emit","message","token","decoded","jwt","verify","process","env","JWT_SECRET","user","email","ChatModel","create","frame","_id","findById","playerSchema","spawnPlayer","broadcast","playerData","flipX","playerAttacking","currentDirection","chestId","gold","updateGold","spawnerId","removeObject","itemId","removeItem","canPickupItem","addItem","monsterId","attack","playerAttackValue","loseHealth","health","updateHealth","playerAttacked","parseInt","respawn","attackedPlayerId","to","config","spawnInterval","limit","spawnerType","SpawnerType","CHEST","Object","keys","key","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","ITEM","addItems","deleteItems","playerId","PlayerModel","item","chest","monster"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport PlayerModel from \"./PlayerModel\";\r\nimport * as levelData from \"../../public/assets/level/large_level.json\";\r\nimport * as itemData from \"../../public/assets/level/tools.json\";\r\n\r\nimport Spawner from \"./Spawner\";\r\nimport ChatModel from \"../models/ChatModel\";\r\nimport { SpawnerType } from \"./utils\";\r\nimport UserModel from \"../models/UserModel\";\r\nimport mongoose from \"mongoose\";\r\nimport { async } from \"regenerator-runtime\";\r\nexport default class GameManager {\r\n  constructor(io) {\r\n    this.io = io;\r\n    this.spawners = {};\r\n    this.chests = {};\r\n    this.monsters = {};\r\n    this.players = {};\r\n    this.items = {};\r\n\r\n    this.playerLocations = [];\r\n    this.chestLocations = {};\r\n    this.monsterLocations = {};\r\n    this.itemsLocations = itemData.locations;\r\n  }\r\n\r\n  setup() {\r\n    this.parseMapData();\r\n    this.setupEventListeners();\r\n    this.setupSpawners();\r\n  }\r\n\r\n  parseMapData() {\r\n    this.levelData = levelData;\r\n    this.levelData.layers.forEach((layer) => {\r\n      if (layer.name === \"player_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          this.playerLocations.push([obj.x, obj.y]);\r\n        });\r\n      } else if (layer.name === \"monster_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.monsterLocations[obj.properties.spawner]) {\r\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      } else if (layer.name === \"chest_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.chestLocations[obj.properties.spawner]) {\r\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.io.on(\"connection\", (socket) => {\r\n      // player disconnected\r\n\r\n      /*socket.on(\"disconnect\", async () => {\r\n        // delete user data from server\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { data } = decoded.user;\r\n          console.log(data)\r\n          await UserModel.save({ data });\r\n          console.log(this.players[socket.id]);\r\n\r\n          delete this.players[socket.id];\r\n\r\n          // emit a message to all players to remove this player\r\n          this.io.emit(\"disconnected\", socket.id);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      });*/\r\n\r\n      socket.on(\"savePlayerData\", async () => {\r\n\r\n        try {\r\n\r\n          if(!this.players[socket.id].items){\r\n            this.players[socket.id].items = null\r\n          }\r\n\r\n          await UserModel.updateOne(\r\n            { username: this.players[socket.id].playerName },\r\n            {\r\n              $set: {\r\n                player: this.players[socket.id],\r\n              },\r\n            }\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      });\r\n\r\n      socket.on(\"disconnect\", () => {\r\n        // delete user data from server\r\n\r\n        console.log(\"disconnect\");\r\n\r\n        delete this.players[socket.id];\r\n\r\n        // emit a message to all players to remove this player\r\n        this.io.emit(\"disconnected\", socket.id);\r\n      });\r\n\r\n      socket.on(\"sendMessage\", async (message, token, player) => {\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { name, email } = decoded.user;\r\n          await ChatModel.create({ email, message });\r\n          this.io.emit(\"newMessage\", {\r\n            message,\r\n            name: this.players[socket.id].playerName,\r\n            frame: this.players[socket.id].frame,\r\n          });\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      });\r\n\r\n      socket.on(\"newPlayer\", async (token, frame) => {\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { name, _id } = decoded.user;\r\n\r\n          const playerSchema = await UserModel.findById(_id);\r\n          // create a new Player\r\n          this.spawnPlayer(socket.id, name, frame, playerSchema.player);\r\n\r\n          // send the players object to the new player\r\n          socket.emit(\"currentPlayers\", this.players);\r\n\r\n          // send the monsters object to the new player\r\n          socket.emit(\"currentMonsters\", this.monsters);\r\n\r\n          // send the chests object to the new player\r\n          socket.emit(\"currentChests\", this.chests);\r\n\r\n          // send the items object to the new player\r\n          socket.emit(\"currentItems\", this.items);\r\n\r\n          // inform the other players of the new player that joined\r\n          socket.broadcast.emit(\"spawnPlayer\", this.players[socket.id]);\r\n          socket.emit(\"updateItems\", this.players[socket.id]);\r\n          socket.broadcast.emit(\r\n            \"updatePlayersItems\",\r\n            socket.id,\r\n            this.players[socket.id]\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n          socket.emit(\"invalidToken\");\r\n        }\r\n      });\r\n\r\n      socket.on(\"playerMovement\", (playerData) => {\r\n        if (this.players[socket.id]) {\r\n          this.players[socket.id].x = playerData.x;\r\n          this.players[socket.id].y = playerData.y;\r\n          this.players[socket.id].flipX = playerData.flipX;\r\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\r\n          this.players[socket.id].currentDirection =\r\n            playerData.currentDirection;\r\n\r\n          // emit a message to all players about the player that moved\r\n          this.io.emit(\"playerMoved\", this.players[socket.id]);\r\n        }\r\n      });\r\n\r\n      socket.on(\"pickUpChest\", (chestId) => {\r\n        // update the spawner\r\n        if (this.chests[chestId]) {\r\n          const { gold } = this.chests[chestId];\r\n\r\n          // updating the players gold\r\n          this.players[socket.id].updateGold(gold);\r\n          socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n          socket.broadcast.emit(\r\n            \"updatePlayersScore\",\r\n            socket.id,\r\n            this.players[socket.id].gold\r\n          );\r\n          // removing the chest\r\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\r\n        }\r\n      });\r\n\r\n      socket.on(\"playerDroppedItem\", (itemId) => {\r\n        this.players[socket.id].removeItem(itemId);\r\n        socket.emit(\"updateItems\", this.players[socket.id]);\r\n        socket.broadcast.emit(\r\n          \"updatePlayersItems\",\r\n          socket.id,\r\n          this.players[socket.id]\r\n        );\r\n      });\r\n\r\n      socket.on(\"pickUpItem\", (itemId) => {\r\n        // update the spawner\r\n        if (this.items[itemId]) {\r\n          if (this.players[socket.id].canPickupItem()) {\r\n            this.players[socket.id].addItem(this.items[itemId]);\r\n            socket.emit(\"updateItems\", this.players[socket.id]);\r\n            socket.broadcast.emit(\r\n              \"updatePlayersItems\",\r\n              socket.id,\r\n              this.players[socket.id]\r\n            );\r\n\r\n            // removing the item\r\n            this.spawners[this.items[itemId].spawnerId].removeObject(itemId);\r\n          }\r\n        }\r\n      });\r\n\r\n      socket.on(\"monsterAttacked\", (monsterId) => {\r\n        // update the spawner\r\n        if (this.monsters[monsterId]) {\r\n          const { gold, attack } = this.monsters[monsterId];\r\n          const playerAttackValue = this.players[socket.id].attack;\r\n          // subtract health monster model\r\n          this.monsters[monsterId].loseHealth(playerAttackValue);\r\n\r\n          // check the monsters health, and if dead remove that object\r\n          if (this.monsters[monsterId].health <= 0) {\r\n            // updating the players gold\r\n            this.players[socket.id].updateGold(gold);\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // removing the monster\r\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(\r\n              monsterId\r\n            );\r\n            this.io.emit(\"monsterRemoved\", monsterId);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(15);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            // update the players health\r\n            this.players[socket.id].playerAttacked(attack);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n\r\n            // update the monsters health\r\n            this.io.emit(\r\n              \"updateMonsterHealth\",\r\n              monsterId,\r\n              this.monsters[monsterId].health\r\n            );\r\n\r\n            // check the player's health, if below 0 have the player respawn\r\n            if (this.players[socket.id].health <= 0) {\r\n              // update the gold the player has\r\n              this.players[socket.id].updateGold(\r\n                parseInt(-this.players[socket.id].gold / 2, 10)\r\n              );\r\n              socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n              // respawn the player\r\n              this.players[socket.id].respawn(this.players);\r\n              this.io.emit(\"respawnPlayer\", this.players[socket.id]);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      socket.on(\"attackedPlayer\", (attackedPlayerId) => {\r\n        if (this.players[attackedPlayerId]) {\r\n          // get required info from attacked player\r\n          const { gold } = this.players[attackedPlayerId];\r\n          const playerAttackValue = this.players[socket.id].attack;\r\n\r\n          // subtract health from attacked player\r\n          this.players[attackedPlayerId].playerAttacked(playerAttackValue);\r\n\r\n          // check attacked players health, if dead send gold to other player\r\n          if (this.players[attackedPlayerId].health <= 0) {\r\n            // get the amount of gold, and update player object\r\n            this.players[socket.id].updateGold(gold);\r\n\r\n            // respawn attacked player\r\n            this.players[attackedPlayerId].respawn(this.players);\r\n            this.io.emit(\"respawnPlayer\", this.players[attackedPlayerId]);\r\n\r\n            // send update gold message to player\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // reset the attacked players gold\r\n            this.players[attackedPlayerId].updateGold(-gold);\r\n            this.io\r\n              .to(`${attackedPlayerId}`)\r\n              .emit(\"updateScore\", this.players[attackedPlayerId].gold);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(15);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              attackedPlayerId,\r\n              this.players[attackedPlayerId].health\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // player connected to our game\r\n      console.log(\"player connected to our game\");\r\n    });\r\n  }\r\n\r\n  setupSpawners() {\r\n    const config = {\r\n      spawnInterval: 3000,\r\n      limit: 3,\r\n      spawnerType: SpawnerType.CHEST,\r\n      id: \"\",\r\n    };\r\n    let spawner;\r\n\r\n    // create chest spawners\r\n    Object.keys(this.chestLocations).forEach((key) => {\r\n      config.id = `chest-${key}`;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.chestLocations[key],\r\n        this.addChest.bind(this),\r\n        this.deleteChest.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n\r\n    // create monster spawners\r\n    Object.keys(this.monsterLocations).forEach((key) => {\r\n      config.id = `monster-${key}`;\r\n      config.spawnerType = SpawnerType.MONSTER;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.monsterLocations[key],\r\n        this.addMonster.bind(this),\r\n        this.deleteMonster.bind(this),\r\n        this.moveMonsters.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n\r\n    // create items spawners\r\n    config.id = \"item\";\r\n    config.spawnerType = SpawnerType.ITEM;\r\n    spawner = new Spawner(\r\n      config,\r\n      this.itemsLocations,\r\n      this.addItems.bind(this),\r\n      this.deleteItems.bind(this)\r\n    );\r\n    this.spawners[spawner.id] = spawner;\r\n  }\r\n  spawnPlayer(playerId, name, frame, playerSchema) {\r\n    const player = new PlayerModel(\r\n      playerId,\r\n      this.playerLocations,\r\n      this.players,\r\n      name,\r\n      frame,\r\n      playerSchema\r\n    );\r\n    this.players[playerId] = player;\r\n  }\r\n\r\n  addItems(itemId, item) {\r\n    \r\n    this.items[itemId] = item;\r\n    this.io.emit(\"itemSpawned\", item);\r\n  }\r\n\r\n  deleteItems(itemId) {\r\n    delete this.items[itemId];\r\n    this.io.emit(\"itemRemoved\", itemId);\r\n  }\r\n\r\n  addChest(chestId, chest) {\r\n    this.chests[chestId] = chest;\r\n    this.io.emit(\"chestSpawned\", chest);\r\n  }\r\n\r\n  deleteChest(chestId) {\r\n    delete this.chests[chestId];\r\n    this.io.emit(\"chestRemoved\", chestId);\r\n  }\r\n\r\n  addMonster(monsterId, monster) {\r\n    this.monsters[monsterId] = monster;\r\n    this.io.emit(\"monsterSpawned\", monster);\r\n  }\r\n\r\n  deleteMonster(monsterId) {\r\n    delete this.monsters[monsterId];\r\n    this.io.emit(\"monsterRemoved\", monsterId);\r\n  }\r\n\r\n  moveMonsters() {\r\n    this.io.emit(\"monsterMovement\", this.monsters);\r\n  }\r\n}\r\n"],"file":"GameManager.js"}