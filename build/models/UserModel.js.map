{"version":3,"sources":["../../src/models/UserModel.js"],"names":["Schema","mongoose","PlayerSchema","playerName","type","String","attack","Number","defense","maxHealth","health","frame","gold","items","Object","equipedItems","UserSchema","email","required","unique","password","username","resetToken","resetTokenExp","Date","player","pre","next","bcrypt","hash","methods","isValidPassword","user","compare","UserModel","model"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AAHA;AAIA,IAAQA,MAAR,GAAmBC,oBAAnB,CAAQD,MAAR;AAEA,IAAME,YAAY,GAAG,IAAIF,MAAJ,CAAW;AAC9BG,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAEC;AADI,GADkB;AAI9BC,EAAAA,MAAM,EAAE;AACNF,IAAAA,IAAI,EAAEG;AADA,GAJsB;AAO9BC,EAAAA,OAAO,EAAE;AACPJ,IAAAA,IAAI,EAAEG;AADC,GAPqB;AAU9BE,EAAAA,SAAS,EAAE;AACTL,IAAAA,IAAI,EAAEG;AADG,GAVmB;AAa9BG,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAEG;AADA,GAbsB;AAgB9BI,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAEG;AADD,GAhBuB;AAmB9BK,EAAAA,IAAI,EAAE;AACJR,IAAAA,IAAI,EAAEG;AADF,GAnBwB;AAsB9BM,EAAAA,KAAK,EAAE;AACLT,IAAAA,IAAI,EAACU;AADA,GAtBuB;AAyB9BC,EAAAA,YAAY,EAAC;AACXX,IAAAA,IAAI,EAACU;AADM;AAzBiB,CAAX,CAArB;AA8BA,IAAME,UAAU,GAAG,IAAIhB,MAAJ,CAAW;AAC5BiB,EAAAA,KAAK,EAAE;AACLb,IAAAA,IAAI,EAAEC,MADD;AAELa,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADqB;AAM5BC,EAAAA,QAAQ,EAAE;AACRhB,IAAAA,IAAI,EAAEC,MADE;AAERa,IAAAA,QAAQ,EAAE;AAFF,GANkB;AAU5BG,EAAAA,QAAQ,EAAE;AACRjB,IAAAA,IAAI,EAAEC,MADE;AAERa,IAAAA,QAAQ,EAAE,IAFF;AAGRC,IAAAA,MAAM,EAAE;AAHA,GAVkB;AAe5BG,EAAAA,UAAU,EAAE;AACVlB,IAAAA,IAAI,EAAEC;AADI,GAfgB;AAkB5BkB,EAAAA,aAAa,EAAE;AACbnB,IAAAA,IAAI,EAAEoB;AADO,GAlBa;AAqB5BC,EAAAA,MAAM,EAAE;AACNrB,IAAAA,IAAI,EAAEF;AADA;AArBoB,CAAX,CAAnB;AA0BAc,UAAU,CAACU,GAAX,CAAe,MAAf;AAAA,2FAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,mBAAOC,IAAP,CAAY,KAAKT,QAAjB,EAA2B,EAA3B,CADE;;AAAA;AACfS,YAAAA,IADe;AAErB,iBAAKT,QAAL,GAAgBS,IAAhB;AACAF,YAAAA,IAAI;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAMAX,UAAU,CAACc,OAAX,CAAmBC,eAAnB;AAAA,4FAAqC,kBAAgBX,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BY,YAAAA,IAD6B,GACtB,IADsB;AAAA;AAAA,mBAEbJ,mBAAOK,OAAP,CAAeb,QAAf,EAAyBY,IAAI,CAACZ,QAA9B,CAFa;;AAAA;AAE7Ba,YAAAA,OAF6B;AAAA,8CAG5BA,OAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMC,SAAS,GAAGjC,qBAASkC,KAAT,CAAe,MAAf,EAAuBnB,UAAvB,CAAlB;;eAEekB,S","sourcesContent":["/* eslint-disable func-names */\r\nimport mongoose from \"mongoose\";\r\nimport bcrypt from \"bcrypt\";\r\nimport PlayerModel from \"../game_manager/PlayerModel\";\r\nconst { Schema } = mongoose;\r\n\r\nconst PlayerSchema = new Schema({\r\n  playerName: {\r\n    type: String,\r\n  },\r\n  attack: {\r\n    type: Number,\r\n  },\r\n  defense: {\r\n    type: Number,\r\n  },\r\n  maxHealth: {\r\n    type: Number,\r\n  },\r\n  health: {\r\n    type: Number,\r\n  },\r\n  frame: {\r\n    type: Number,\r\n  },\r\n  gold: {\r\n    type: Number,\r\n  },\r\n  items: {\r\n    type:Object\r\n  },\r\n  equipedItems:{\r\n    type:Object\r\n  }\r\n});\r\n\r\nconst UserSchema = new Schema({\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n  },\r\n  resetToken: {\r\n    type: String,\r\n  },\r\n  resetTokenExp: {\r\n    type: Date,\r\n  },\r\n  player: {\r\n    type: PlayerSchema,\r\n  },\r\n});\r\n\r\nUserSchema.pre(\"save\", async function (next) {\r\n  const hash = await bcrypt.hash(this.password, 10);\r\n  this.password = hash;\r\n  next();\r\n});\r\n\r\nUserSchema.methods.isValidPassword = async function (password) {\r\n  const user = this;\r\n  const compare = await bcrypt.compare(password, user.password);\r\n  return compare;\r\n};\r\n\r\nconst UserModel = mongoose.model(\"user\", UserSchema);\r\n\r\nexport default UserModel;\r\n"],"file":"UserModel.js"}