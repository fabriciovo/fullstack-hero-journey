{"version":3,"sources":["../../src/models/UserModel.js"],"names":["Schema","mongoose","UserSchema","email","type","String","required","unqiue","password","username","resetToken","resetTokenExp","Date","pre","next","bcrypt","hash","methods","isValidPassword","user","compare","UserModel","model"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAFA;AAIA,IAAQA,MAAR,GAAmBC,oBAAnB,CAAQD,MAAR;AAEA,IAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC5BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADqB;AAM5BC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GANkB;AAU5BG,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GAVkB;AAc5BI,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAEC;AADI,GAdgB;AAiB5BM,EAAAA,aAAa,EAAE;AACbP,IAAAA,IAAI,EAAEQ;AADO;AAjBa,CAAX,CAAnB;AAsBAV,UAAU,CAACW,GAAX,CAAe,MAAf;AAAA,2FAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,mBAAOC,IAAP,CAAY,KAAKR,QAAjB,EAA2B,EAA3B,CADE;;AAAA;AACfQ,YAAAA,IADe;AAErB,iBAAKR,QAAL,GAAgBQ,IAAhB;AACAF,YAAAA,IAAI;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAMAZ,UAAU,CAACe,OAAX,CAAmBC,eAAnB;AAAA,4FAAqC,kBAAgBV,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BW,YAAAA,IAD6B,GACtB,IADsB;AAAA;AAAA,mBAEbJ,mBAAOK,OAAP,CAAeZ,QAAf,EAAyBW,IAAI,CAACX,QAA9B,CAFa;;AAAA;AAE7BY,YAAAA,OAF6B;AAAA,8CAG5BA,OAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMC,SAAS,GAAGpB,qBAASqB,KAAT,CAAe,MAAf,EAAuBpB,UAAvB,CAAlB;;eAEemB,S","sourcesContent":["/* eslint-disable func-names */\r\nimport mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst { Schema } = mongoose;\r\n\r\nconst UserSchema = new Schema({\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unqiue: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  resetToken: {\r\n    type: String,\r\n  },\r\n  resetTokenExp: {\r\n    type: Date,\r\n  },\r\n});\r\n\r\nUserSchema.pre('save', async function (next) {\r\n  const hash = await bcrypt.hash(this.password, 10);\r\n  this.password = hash;\r\n  next();\r\n});\r\n\r\nUserSchema.methods.isValidPassword = async function (password) {\r\n  const user = this;\r\n  const compare = await bcrypt.compare(password, user.password);\r\n  return compare;\r\n};\r\n\r\nconst UserModel = mongoose.model('user', UserSchema);\r\n\r\nexport default UserModel;\r\n"],"file":"UserModel.js"}