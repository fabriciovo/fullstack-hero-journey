{"version":3,"sources":["../../src/game_manager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","players","items","playerLocations","chestLocations","monsterLocations","itemsLocations","itemData","locations","parseMapData","setupEventListeners","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","id","emit","message","token","player","decoded","jwt","verify","process","env","JWT_SECRET","user","email","ChatModel","create","console","log","playerName","frame","spawnPlayer","broadcast","error","playerData","flipX","playerAttacking","currentDirection","chestId","gold","updateGold","spawnerId","removeObject","itemId","canPickupItem","addItem","monsterId","attack","playerAttackValue","loseHealth","health","updateHealth","playerAttacked","parseInt","respawn","attackedPlayerId","to","config","spawnInterval","limit","spawnerType","SpawnerType","CHEST","Object","keys","key","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","ITEM","addItems","deleteItems","playerId","PlayerModel","item","chest","monster"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport PlayerModel from \"./PlayerModel\";\r\nimport * as levelData from \"../../public/assets/level/large_level.json\";\r\nimport * as itemData from \"../../public/assets/level/tools.json\";\r\n\r\nimport Spawner from \"./Spawner\";\r\nimport ChatModel from \"../models/ChatModel\";\r\nimport { SpawnerType } from \"./utils\";\r\nexport default class GameManager {\r\n  constructor(io) {\r\n    this.io = io;\r\n    this.spawners = {};\r\n    this.chests = {};\r\n    this.monsters = {};\r\n    this.players = {};\r\n    this.items = {};\r\n\r\n    this.playerLocations = [];\r\n    this.chestLocations = {};\r\n    this.monsterLocations = {};\r\n    this.itemsLocations = itemData.locations;\r\n  }\r\n\r\n  setup() {\r\n    this.parseMapData();\r\n    this.setupEventListeners();\r\n    this.setupSpawners();\r\n  }\r\n\r\n  parseMapData() {\r\n    this.levelData = levelData;\r\n    this.levelData.layers.forEach((layer) => {\r\n      if (layer.name === \"player_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          this.playerLocations.push([obj.x, obj.y]);\r\n        });\r\n      } else if (layer.name === \"monster_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.monsterLocations[obj.properties.spawner]) {\r\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      } else if (layer.name === \"chest_locations\") {\r\n        layer.objects.forEach((obj) => {\r\n          if (this.chestLocations[obj.properties.spawner]) {\r\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\r\n          } else {\r\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.io.on(\"connection\", (socket) => {\r\n      // player disconnected\r\n      socket.on(\"disconnect\", () => {\r\n        // delete user data from server\r\n        delete this.players[socket.id];\r\n\r\n        // emit a message to all players to remove this player\r\n        this.io.emit(\"disconnected\", socket.id);\r\n      });\r\n\r\n      socket.on(\"sendMessage\", async (message, token, player) => {\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { name, email } = decoded.user;\r\n          await ChatModel.create({ email, message });\r\n          console.log(this.players[socket.id]);\r\n          this.io.emit(\"newMessage\", {\r\n            message,\r\n            name: this.players[socket.id].playerName,\r\n            frame: this.players[socket.id].frame,\r\n          });\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      });\r\n\r\n      socket.on(\"newPlayer\", (token, frame) => {\r\n        try {\r\n          const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n          const { name } = decoded.user;\r\n          // create a new Player\r\n          this.spawnPlayer(socket.id, name, frame);\r\n\r\n          // send the players object to the new player\r\n          socket.emit(\"currentPlayers\", this.players);\r\n\r\n          // send the monsters object to the new player\r\n          socket.emit(\"currentMonsters\", this.monsters);\r\n\r\n          // send the chests object to the new player\r\n          socket.emit(\"currentChests\", this.chests);\r\n\r\n          // send the items object to the new player\r\n          socket.emit(\"currentItems\", this.items);\r\n\r\n          // inform the other players of the new player that joined\r\n          socket.broadcast.emit(\"spawnPlayer\", this.players[socket.id]);\r\n        } catch (error) {\r\n          console.log(error);\r\n          socket.emit(\"invalidToken\");\r\n        }\r\n      });\r\n\r\n      socket.on(\"playerMovement\", (playerData) => {\r\n        if (this.players[socket.id]) {\r\n          this.players[socket.id].x = playerData.x;\r\n          this.players[socket.id].y = playerData.y;\r\n          this.players[socket.id].flipX = playerData.flipX;\r\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\r\n          this.players[socket.id].currentDirection =\r\n            playerData.currentDirection;\r\n\r\n          // emit a message to all players about the player that moved\r\n          this.io.emit(\"playerMoved\", this.players[socket.id]);\r\n        }\r\n      });\r\n\r\n      socket.on(\"pickUpChest\", (chestId) => {\r\n        // update the spawner\r\n        if (this.chests[chestId]) {\r\n          const { gold } = this.chests[chestId];\r\n\r\n          // updating the players gold\r\n          this.players[socket.id].updateGold(gold);\r\n          socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n          // removing the chest\r\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\r\n        }\r\n      });\r\n\r\n\r\n      socket.on('pickUpItem', (itemId) => {\r\n        // update the spawner\r\n        if (this.items[itemId]) {\r\n          if (this.players[socket.id].canPickupItem()) {\r\n            this.players[socket.id].addItem(this.items[itemId]);\r\n            socket.emit('updateItems', this.players[socket.id]);\r\n            socket.broadcast.emit('updatePlayersItems', socket.id, this.players[socket.id]);\r\n\r\n            // removing the item\r\n            this.spawners[this.items[itemId].spawnerId].removeObject(itemId);\r\n          }\r\n        }\r\n      });\r\n\r\n      socket.on(\"monsterAttacked\", (monsterId) => {\r\n        // update the spawner\r\n        if (this.monsters[monsterId]) {\r\n          const { gold, attack } = this.monsters[monsterId];\r\n          const playerAttackValue = this.players[socket.id].attack;\r\n          // subtract health monster model\r\n          this.monsters[monsterId].loseHealth(playerAttackValue);\r\n\r\n          // check the monsters health, and if dead remove that object\r\n          if (this.monsters[monsterId].health <= 0) {\r\n            // updating the players gold\r\n            this.players[socket.id].updateGold(gold);\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // removing the monster\r\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(\r\n              monsterId\r\n            );\r\n            this.io.emit(\"monsterRemoved\", monsterId);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(15);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            // update the players health\r\n            this.players[socket.id].playerAttacked(attack);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n\r\n            // update the monsters health\r\n            this.io.emit(\r\n              \"updateMonsterHealth\",\r\n              monsterId,\r\n              this.monsters[monsterId].health\r\n            );\r\n\r\n            // check the player's health, if below 0 have the player respawn\r\n            if (this.players[socket.id].health <= 0) {\r\n              // update the gold the player has\r\n              this.players[socket.id].updateGold(\r\n                parseInt(-this.players[socket.id].gold / 2, 10)\r\n              );\r\n              socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n              // respawn the player\r\n              this.players[socket.id].respawn(this.players);\r\n              this.io.emit(\"respawnPlayer\", this.players[socket.id]);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      socket.on(\"attackedPlayer\", (attackedPlayerId) => {\r\n        if (this.players[attackedPlayerId]) {\r\n          // get required info from attacked player\r\n          const { gold } = this.players[attackedPlayerId];\r\n          const playerAttackValue = this.players[socket.id].attack;\r\n\r\n          // subtract health from attacked player\r\n          this.players[attackedPlayerId].playerAttacked(playerAttackValue);\r\n\r\n          // check attacked players health, if dead send gold to other player\r\n          if (this.players[attackedPlayerId].health <= 0) {\r\n            // get the amount of gold, and update player object\r\n            this.players[socket.id].updateGold(gold);\r\n\r\n            // respawn attacked player\r\n            this.players[attackedPlayerId].respawn(this.players);\r\n            this.io.emit(\"respawnPlayer\", this.players[attackedPlayerId]);\r\n\r\n            // send update gold message to player\r\n            socket.emit(\"updateScore\", this.players[socket.id].gold);\r\n\r\n            // reset the attacked players gold\r\n            this.players[attackedPlayerId].updateGold(-gold);\r\n            this.io\r\n              .to(`${attackedPlayerId}`)\r\n              .emit(\"updateScore\", this.players[attackedPlayerId].gold);\r\n\r\n            // add bonus health to the player\r\n            this.players[socket.id].updateHealth(15);\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              socket.id,\r\n              this.players[socket.id].health\r\n            );\r\n          } else {\r\n            this.io.emit(\r\n              \"updatePlayerHealth\",\r\n              attackedPlayerId,\r\n              this.players[attackedPlayerId].health\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // player connected to our game\r\n      console.log(\"player connected to our game\");\r\n    });\r\n  }\r\n\r\n  setupSpawners() {\r\n    const config = {\r\n      spawnInterval: 3000,\r\n      limit: 3,\r\n      spawnerType: SpawnerType.CHEST,\r\n      id: \"\",\r\n    };\r\n    let spawner;\r\n\r\n    // create chest spawners\r\n    Object.keys(this.chestLocations).forEach((key) => {\r\n      config.id = `chest-${key}`;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.chestLocations[key],\r\n        this.addChest.bind(this),\r\n        this.deleteChest.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n\r\n    // create monster spawners\r\n    Object.keys(this.monsterLocations).forEach((key) => {\r\n      config.id = `monster-${key}`;\r\n      config.spawnerType = SpawnerType.MONSTER;\r\n\r\n      spawner = new Spawner(\r\n        config,\r\n        this.monsterLocations[key],\r\n        this.addMonster.bind(this),\r\n        this.deleteMonster.bind(this),\r\n        this.moveMonsters.bind(this)\r\n      );\r\n      this.spawners[spawner.id] = spawner;\r\n    });\r\n\r\n    // create items spawners\r\n    config.id = \"item\";\r\n    config.spawnerType = SpawnerType.ITEM;\r\n    spawner = new Spawner(\r\n      config,\r\n      this.itemsLocations,\r\n      this.addItems.bind(this),\r\n      this.deleteItems.bind(this)\r\n    );\r\n    this.spawners[spawner.id] = spawner;\r\n  }\r\n\r\n  spawnPlayer(playerId, name, frame) {\r\n    const player = new PlayerModel(\r\n      playerId,\r\n      this.playerLocations,\r\n      this.players,\r\n      name,\r\n      frame\r\n    );\r\n    this.players[playerId] = player;\r\n  }\r\n\r\n  addItems(itemId, item) {\r\n    this.items[itemId] = item;\r\n    this.io.emit(\"itemSpawned\", item);\r\n  }\r\n\r\n  deleteItems(itemId) {\r\n    delete this.items[itemId];\r\n    this.io.emit(\"itemRemoved\", itemId);\r\n  }\r\n\r\n  addChest(chestId, chest) {\r\n    this.chests[chestId] = chest;\r\n    this.io.emit(\"chestSpawned\", chest);\r\n  }\r\n\r\n  deleteChest(chestId) {\r\n    delete this.chests[chestId];\r\n    this.io.emit(\"chestRemoved\", chestId);\r\n  }\r\n\r\n  addMonster(monsterId, monster) {\r\n    this.monsters[monsterId] = monster;\r\n    this.io.emit(\"monsterSpawned\", monster);\r\n  }\r\n\r\n  deleteMonster(monsterId) {\r\n    delete this.monsters[monsterId];\r\n    this.io.emit(\"monsterRemoved\", monsterId);\r\n  }\r\n\r\n  moveMonsters() {\r\n    this.io.emit(\"monsterMovement\", this.monsters);\r\n  }\r\n}\r\n"],"file":"GameManager.js"}